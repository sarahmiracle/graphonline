include "alldifferent.mzn";

int: N;
int: M;
set of int: Crange = 0..20;
array[1..N,1..M] of 0..1: start;
array[1..N,1..M] of var Crange: solution;

constraint forall(i in 1..N)(
    forall(j in 1..M)(
      if start[i,j] == 0 then solution[i,j] = start[i,j] else solution[i,j] > 0 endif
    )
);

constraint forall (i in 1..N) (
                   alldifferent( [ solution[i,j] | j in 1..M where start[i,j]==1]) 
);

constraint forall (j in 1..M) (
                   alldifferent( [ solution[i,j] | i in 1..N where start[i,j]==1]) 
);

constraint forall (i in 1..N) (
         max( [ solution[i,j] | j in 1..M where start[i,j]==1]) - min( [ solution[i,j] | j in 1..M where start[i,j]==1]) + 1 == 
        sum( [ 1 | j in 1..M where start[i,j]==1])
);

constraint forall (j in 1..M) (
         max( [ solution[i,j] | i in 1..N where start[i,j]==1]) - min ( [ solution[i,j] | i in 1..N where start[i,j]==1]) + 1 ==
      sum( [ 1 | i in 1..N where start[i,j]==1])
);

solve satisfy;

output  [ show(solution[i,j]) ++ " " ++ 
         
         if j == M  then "\n" else " " endif 
         | i in 1..N, j in 1..M ] ++ ["\n"];
